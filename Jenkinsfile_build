pipeline {
    agent {
        kubernetes {
            yamlFile './jenkins-slave.yaml'
        }
    }
    
    parameters {
        booleanParam(name: 'Build', defaultValue: true, description: 'Run CI Build?')
        booleanParam(name: 'Deploy', defaultValue: true, description: 'Run App Deploy?')
        string(name: 'BUILD_NUMBER', defaultValue: "latest", description: 'App image tag to deploy')
    }
    environment {
        ZONE = "europe-west1-b"
        PROJECT_ID = "pod-x-sarjan-purohit"
    }
    stages {
        stage("Building Application Docker Image"){
            when {
                expression { params.Deploy }
            }
            steps{
                script{
                    sh 'gcloud auth configure-docker europe-west1-docker.pkg.dev'
                    sh 'gcloud config list'
                    sh 'docker build . -t europe-west1-docker.pkg.dev/pod-x-sarjan-purohit/jenkins/hello-app:${BUILD_NUMBER}'
                    sh 'docker push europe-west1-docker.pkg.dev/pod-x-sarjan-purohit/jenkins/hello-app:${BUILD_NUMBER}'
                    }
                }
            }
            
        stage('Trigger Deploy Job.') {
            when {
                expression { params.Deploy }
            }
            steps {
                script {
                    def deployJob = "CI-CD-Test/CD-Deploy-Job/${env.GIT_BRANCH}"
                    build(job: deployJob, wait: true, 
                    parameters: [
                      string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER)
                    ])
                }
            }
        }
    }
    post {
        always {
            // Actions that should always run, regardless of build result
            echo 'Pipeline Ended.'
        }
        success {
            // Actions to take when the pipeline succeeds
            echo 'Pipeline succeeded.'
            slackSend color: "good", message: "Pipeline <${env.BUILD_URL}|${env.JOB_NAME}> is Successful"
        }
        failure {
            // Actions to take when the pipeline fails
            echo 'Pipeline failed.'
            slackSend color: "danger", message: "Pipeline <${env.BUILD_URL}|${env.JOB_NAME}> has Failed"
        }
        unstable {
            // Actions to take when the pipeline is unstable
            echo 'Pipeline is unstable.'
            slackSend color: "warning", message: "Pipeline <${env.BUILD_URL}|${env.JOB_NAME}> is Unstable"
        }
    }
}
